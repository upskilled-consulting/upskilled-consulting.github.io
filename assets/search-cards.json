[
    {
        "title": "Candlestick Chart and Bollinger Bands with Plotly",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Bollinger Bands", "Plotly"],
        "description": "The Python script utilizes the yfinance and plotly libraries to fetch stock data, calculate Bollinger Bands, and create an interactive candlestick chart with upper and lower bands. This allows technical users to perform detailed technical analysis on a given stock, offering insights into price trends, volatility, and potential reversal points. The script provides a dynamic and visually appealing representation of stock performance, aiding traders and analysts in making informed decisions based on historical price patterns.",
        "url": "https://colab.research.google.com/drive/1_Ex9MR6Jw41Vii8K2T6w2PqSuniTkXlq?usp=sharing?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Visualizing GDP Data with Plotly",
        "category": "Data Science",
        "keywords": ["Data Manipulation", "Pandas", "Plotly"],
        "description": "The Python script utilizes Pandas and Plotly to analyze and visualize GDP data from the Bureau of Economic Analysis (BEA). It efficiently reads an Excel file, cleans and manipulates the data, and creates choropleth maps representing GDP by state and percentage change since 2022. The script offers technical users a powerful tool for handling economic data, conducting regional analyses, and creating visually appealing, accessible visualizations.",
        "url": "https://colab.research.google.com/drive/1DNF8aInK2-EVgs46eorqno-aYL5Dz63d?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Beige Book Sentiment Analysis",
        "category": "Data Science",
        "keywords": ["NLP", "Sentiment Analysis"],
        "description": "The provided Python script performs sentiment analysis on Federal Reserve Beige Book reports using VADER sentiment analysis and visualizes the sentiment scores over different sentences. It extracts text from PDFs, preprocesses it, and calculates sentiment scores for each sentence. The script then creates interactive visualizations using Plotly and Dash, allowing users to explore and understand the sentiment trends in the reports. This tool is valuable for financial analysts, economists, and researchers to gain insights into the sentiment dynamics of key economic reports, aiding in decision-making and trend analysis.",
        "url": "https://colab.research.google.com/drive/19cEiLENkjRJgiBqOOYSn3zzMhEiBY8dn?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Modeling P&L from Signals Produced by TA-Lib's ADXR Momentum Indicator",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Algorithmic Trading"],
        "description": "This Python script leverages the TA-Lib library to calculate the Average Directional Movement Index Rating (ADXR) for trend analysis in financial markets. It demonstrates the use of technical indicators such as ADX, DI+, and DI- for generating trading signals. The script further explores machine learning techniques, including Decision Tree classifiers and neural networks (both feedforward and Long Short-Term Memory), for predicting trading signals. An extended example incorporates the simulation of trades, considering transaction costs and slippage, to evaluate the impact on the portfolio balance.",
        "url": "https://colab.research.google.com/drive/1ZTMs75OuONWJq7FjLJiKQcoqaXFyZliK?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Strategy Analysis with Pandas-TA and TA-Lib",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Algorithmic Trading"],
        "description": "The Python script provides a comprehensive framework for technical analysis using Pandas TA and TA-Lib libraries. It covers strategy analysis, trend creation, and visualization of trading signals. The script allows users to easily analyze financial data, implement trading strategies, and visualize the performance of their strategies over time. It is a valuable tool for those interested in algorithmic trading and seeking to perform in-depth technical analysis on financial markets.",
        "url": "https://colab.research.google.com/drive/1UrnCTWB3756_8biNZg8kUSoR23f0L-fO?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Technical Analysis with Pandas-TA",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Algorithmic Trading"],
        "description": "This Python script leverages Pandas TA, mplfinance, and TA-Lib to perform comprehensive technical analysis on financial data, aiding in the development and visualization of trading strategies. The script facilitates the analysis of various indicators such as moving averages, RSI, MACD, squeeze, and Archer OBV, providing valuable insights for algorithmic trading strategies. It is a powerful tool for both stock market and cryptocurrency enthusiasts to analyze trends and make informed trading decisions.",
        "url": "https://colab.research.google.com/drive/1E2SmOX0JIoxmRNKCgcuKahF1bZOZnDm2?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Technical Analysis with TA-Lib",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Algorithmic Trading"],
        "description": "The provided Python script utilizes the TA-Lib library to perform technical analysis on financial data, particularly focusing on Bollinger Bands, Moving Averages (SMA), and Stochastic Oscillator. It fetches historical exchange rate data from Yahoo Finance, processes it using Pandas, and then applies various technical indicators. The script includes visualization using Matplotlib to illustrate the closing prices, Bollinger Bands, and the SMA. It serves as a powerful tool for financial analysts and traders to gain insights into market trends and potential entry/exit points based on technical indicators.",
        "url": "https://colab.research.google.com/drive/1oPD9pJDnog1e0ivOqf_BjtZjm_9jWdXN?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Backtesting Simple MA Crossover Strategy with Backtrader",
        "category": "Data Science",
        "keywords": ["Technical Analysis", "Algorithmic Trading"],
        "description": "This Python script utilizes the Backtrader framework to backtest a Moving Average Crossover strategy on historical financial data, specifically EUR/USD exchange rates from Yahoo Finance. The script defines a Simple Moving Average (SMA) Crossover strategy, conducts parameter optimization to find the best-performing moving average pair, and provides insights into the strategy's Sharpe Ratio. The script is a valuable tool for those interested in algorithmic trading, quantitative finance, and automated strategy development, offering a systematic approach to evaluate and optimize trading strategies based on historical market data.",
        "url": "https://colab.research.google.com/drive/1ecUCvuhZs6BHVMERHK7mvDnOUOvihHK_?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "FINRA Scraper",
        "category": "Data Science",
        "keywords": ["Web Scraping", "Pandas"],
        "description": "The Python script utilizes web scraping techniques with BeautifulSoup to extract information about FINRA-regulated broker-dealer firms from their website. It organizes the data using Pandas, creating a DataFrame that includes company names and locations. The script also generates a choropleth map using Plotly to visualize the distribution of broker-dealer firms across different states. This automation aids technical users in efficiently obtaining and analyzing relevant information, particularly for SEO purposes, providing valuable insights into the geographical presence of FINRA-regulated firms.",
        "url": "https://colab.research.google.com/drive/1Rt8kXGltsjWMfrhZx9VO0g2P8NRVXprH?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Text-to-Audio with OpenAI API",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "Text-to-Speech"],
        "description": "The provided Python script utilizes the OpenAI API to perform text-to-speech conversion, demonstrating seamless automation of audio generation from text. With a focus on Python programming and integration of OpenAI's capabilities, the script showcases potential applications in diverse technical domains.",
        "url": "https://colab.research.google.com/drive/1Qq3pzzOE_OnoSUEPfvQiScsISuKwlSzj?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Chart Data to CSV with GPT-4V",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-4 Vision"],
        "description": "The Python script leverages OpenAI's GPT-4 Vision model to extract clean CSV data from images, specifically charts. It demonstrates advanced techniques such as API integration, image processing, and base64 encoding, providing a valuable tool for technical users interested in automating data extraction from images in a concise and efficient manner.",
        "url": "https://colab.research.google.com/drive/1GotU35q0u39Wv2Y4mXO72bOjOYywIl6D?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Evaluating Impact of Chunk Size on Top-k Similarity Scores",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-4", "Semantic Similarity"],
        "description": "This Python script leverages advanced techniques in natural language processing and semantic similarity to perform technical analysis on a set of documents. It explores the impact of different chunk sizes and top-k values on the semantic similarity scores, aiding users in optimizing parameters for document indexing. The script facilitates the evaluation of models, generates datasets for query-response pairs, and utilizes the OpenAI GPT-4 model. Technical users can automate SEO tasks, improve document retrieval, and visualize results through data visualization techniques, enhancing the efficiency and effectiveness of their analysis.",
        "url": "https://colab.research.google.com/drive/1BY0xfxKBsSAlu_ZroFFGnXdy4sVAmGkL?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Zero-Shot Vehicle Detection in Parking Lot Aerial Image",
        "category": "AI Engineering",
        "keywords": ["Transformers", "Object Detection"],
        "description": "The provided Python script demonstrates the implementation of zero-shot object detection using the OWL-ViT model from Hugging Face's Transformers library. It showcases how to perform image processing, batch object detection, and integrate the CLIP model for open-vocabulary detection. The script is valuable for technical users interested in exploring advanced object detection techniques without the need for labeled datasets, making it particularly relevant for applications in computer vision and artificial intelligence.",
        "url": "https://colab.research.google.com/drive/1NlKEsQhBfI7QJAxdHed2DmjFLRSEiVsl?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Image-to-Image with Dall-E 3 and GPT4V",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "DALL-E 3", "GPT-4 Vision"],
        "description": "The script leverages Python and OpenAI's advanced models, DALL-E 3 and GPT-4V, to seamlessly generate coherent image sequences based on user prompts. It showcases the integration of API services for image processing, utilizing neural networks for both text and image generation. The combination of NLP and image generation techniques allows technical users to explore creative applications, making it valuable for developers interested in cutting-edge technologies and innovative projects.",
        "url": "https://colab.research.google.com/drive/1l0uNpkAirrcYJI6P-DRHVHxKY_qTNQGL?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Creating Fine-Tuning Data for GPT-3.5",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "Fine-Tuning", "GPT-3.5"],
        "description": "The Python script demonstrates the process of fine-tuning OpenAI's GPT-3.5-Turbo model using GPT-4 knowledge. It involves generating training and evaluation datasets from PDF documents, utilizing the llama_index library for data processing, and employing ragas for evaluation metrics. The script showcases the steps for fine-tuning, including the use of OpenAIFineTuningHandler, generating fine-tuning data, launching the fine-tuning job, and evaluating the fine-tuned model's performance. The provided technical workflow is valuable for users interested in enhancing language models for specific domain tasks, such as SEO-related question generation and answering.",
        "url": "https://colab.research.google.com/drive/1cI9Eb19_sPx1GaYQ-jQWQK_UhmSOdmND?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Fine-Tuning GPT-3.5",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "Fine-Tuning", "GPT-3.5"],
        "description": "This Python script facilitates the fine-tuning of OpenAI's GPT-3.5 model for chat-based applications. It includes functions for token counting, data format validation, and analyzing conversation lengths. The script provides insights into potential errors in the dataset, estimates the cost and epochs required for fine-tuning, and interacts with OpenAI's API to create, list, and delete fine-tuning jobs. The value to technical users lies in its utility for preparing and optimizing datasets, estimating costs, and managing the fine-tuning process efficiently.",
        "url": "https://colab.research.google.com/drive/19ZWHREAuY_cjHShgzBkY6oVbz9Mi83iC?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "RAG with 10Ks and Llama-Index",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "Llama-Index", "RAG"],
        "description": "The Python script utilizes the LlamaIndex framework to perform financial document analysis on 10-K documents, specifically from Lyft and Uber in 2021. It demonstrates the capabilities of extracting information and synthesizing insights across multiple lengthy financial documents with minimal coding effort. The script involves setting up the LlamaIndex, loading and indexing PDFs, configuring QueryEngines for simple and advanced queries, and using the OpenAI API for natural language processing. The value lies in the efficient extraction of relevant financial information, allowing financial analysts to quickly gain insights and compare data between different companies.",
        "url": "https://colab.research.google.com/drive/1sl1MlBvA1IIALL2ep0CvIMpeTKPAC0dj?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "YouTube Video Summarization with GPT-4",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-4"],
        "description": "The script leverages Python to perform comprehensive YouTube video summarization using GPT-4, integrating with the YouTube Transcript API and OpenAI's ChatCompletion model. It demonstrates efficient techniques for extracting YouTube video IDs from URLs, fetching video transcripts, and generating concise summaries. The technical user can benefit from this script by automating the extraction and summarization process of YouTube video content, aiding in content curation and analysis. Additionally, the script's applicability to diverse technical content, as showcased with the Freecodecamp tutorial, enhances its value for users engaged in technical SEO and content management tasks.",
        "url": "https://colab.research.google.com/drive/1IzDLyOVTOxnljDuJ0ENI3ghrayYjTgGe?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "Image Captioning with GPT-4",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-4 Vision"],
        "description": "The provided Python script utilizes the OpenAI GPT-4V model to automatically generate engaging social media posts from images. It involves encoding images to base64, utilizing the OpenAI API, and creating humorous and non-corny text content with emojis. The script enables users to automate the process of crafting witty social media posts, enhancing their content creation efficiency.",
        "url": "https://colab.research.google.com/drive/1tI3bXWaBSRaWDiMnDB-1X_vBbvTmDsVg?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "arXiv Paper Finder/Summarizer with OpenAI Completions API",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-3.5 Turbo"],
        "description": "The Python script presented here seamlessly integrates various cutting-edge technologies, such as OpenAI's GPT-3.5-turbo model, with practical applications in technical analysis and arXiv paper summarization. By combining functionalities like PDF text extraction, parallel processing using ThreadPoolExecutor, and a tenacity retry mechanism, the script provides a robust and efficient solution for automating SEO-related tasks. Technical users can leverage this script to extract valuable insights from academic papers, perform analysis, and automate the retrieval of relevant information from arXiv, all within a Python environment. The integration of advanced AI models and parallel processing enhances the efficiency of tasks, making it a valuable tool for those involved in content analysis.",
        "url": "https://colab.research.google.com/drive/1ozj78kg9DeNqbSDj3eEtsAF3NYD2-1CS?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    },
    {
        "title": "OCR with Pydantic and GPT-4V",
        "category": "AI Engineering",
        "keywords": ["OpenAI API", "GPT-4 Vision"],
        "description": "The provided Python script showcases the seamless integration of Pydantic, OpenAI GPT-4V, and LlamaIndex for efficient OCR and structured data generation from images. The script is a powerful tool for technical users, offering a programmatic approach to extract valuable information from images, such as restaurant details and Amazon product information. Through the use of GPT-4V, the script enables natural language understanding and data modeling, providing a versatile solution for image summarization and data extraction. This automation tool is particularly valuable for developers and data scientists involved in image processing and SEO optimization, offering a streamlined process for incorporating AI-driven insights into their projects.",
        "url": "https://colab.research.google.com/drive/14ejjuVdCKIHTuC4fRgUmnkzGpq971F-1?usp=sharing%3Fusp%3Dsharing#offline=true&sandboxMode=true",
        "image": "https://via.placeholder.com/250"
    }  
]